---
title: "compute disturbance indicator values and assess correlation with existing systems"
format: html
editor_options: 
  chunk_output_type: console
---

## This quarto document allows analysing the data from the leuk forest

# Preparatory steps and data checking

Load necessary libraries:
```{r}
library(ggplot2)
library(multcomp)
library(ggpubr)
library(tidyr)
library(visreg)
library(lme4)
library(readr)
library(dplyr)
library(multcompView)
```

```{r}
selected_years = c("goedicke", "2004", "2005", "2006", "2007", "2013", "2023", "climax")
labels=data.frame(years = c("goedicke", "2004", "2005", "2006", "2007", "2013", "2023", "climax"), labels = c("Before", "2004", "2005", "2006", "2007", "2013", "2023", "Intact"))

mean_iv <- read_csv("../Daten/Intermediate/mean_indicator_values.csv")
mean_iv <- mean_iv[!is.na(mean_iv$log_dry_seed_mass_mg),]
mean_iv$year <- factor(mean_iv$year, levels = c("goedicke", "2004", "2005", "2006", "2007", "2013", "2023", "climax"))
```


# GLMM model optimization and visualization for indicator values evolution over time and elevational gradient


```{r}
names(mean_iv)
any(is.na(mean_iv$slope))

indicator_data <- mean_iv
indicator_data[is.na(indicator_data$year),]
response_name <- "EIVEresT"
title <- "T"
ylab <- "Temperature"
indicator_data$year[(is.na(indicator_data$year == "goedicke"))]

compute_p_values_for_letters <- function(indicator_data, response_name) {
  tmp_formula_string <- paste(response_name, " ~ elevation + year + (1|global_id)", sep = "")
  model <- lmer(as.formula(tmp_formula_string), data=indicator_data)
  s <- summary(glht(model, linfct = mcp (year = "Tukey" )))
  res <- s$test$pvalues
  names(res) <- gsub(" ", "", names(s$test$coefficients))
  return(res)
}

create_plot <- function(indicator_data, response_name, ylab, title) {
  letters <- multcompLetters(compute_p_values_for_letters(indicator_data, response_name))
  order <- order(levels(as.factor(mean_iv$year)))

  small_letters <- indicator_data |> 
    group_by(year) |>
    summarise(
      mean = mean(!!sym(response_name)), 
      quant = quantile(!!sym(response_name), probs = 0.75)) 
  small_letters$letters <- ""
  small_letters$letters[order] <- letters$Letters

  p <- ggplot(data = indicator_data, aes_string(x = "year", y = response_name)) +
    geom_boxplot() +
    theme_classic() +
    ylab(ylab) +
    xlab("Year") +
    ggtitle(title) +
    theme(plot.title = element_text(hjust = 0.5)) +
    geom_text(data = small_letters, aes(x = year, y = quant, label = letters),
              size = 3, 
              vjust = -0.5,
              nudge_x = 0.1)
  
  return(p)
}

compute_p_values <- function(indicator_data, response_name) {
  tmp_formula_string <- paste(response_name, " ~ elevation + year + (1|global_id)", sep = "")
  model <- lmer(as.formula(tmp_formula_string), data=indicator_data)
  # AIC(model)
   summary(model)
  s <- summary(glht(model, linfct = mcp (year = "Tukey" )))
  result <- data.frame(year = names(s$test$coefficients), response_name = s$test$pvalues)
  names(result)[2] <- response_name
  return(result)
}

create_full_plot <- function(indicator_data, filename) {
  p_moisture <- create_plot(indicator_data, "EIVEresM", "Moisture", "M")
  p_nutrients <- create_plot(indicator_data, "EIVEresN", "Nutrients", "N")
  p_reaction <- create_plot(indicator_data, "EIVEresR", "Reaction", "R")
  p_light <- create_plot(indicator_data, "EIVEresL", "Light", "L")
  p_temperature <- create_plot(indicator_data, "EIVEresT", "Temperature", "T")
  p_dist_sev <- create_plot(indicator_data, "DistSeverity", "Disturbance Severity", "Disturbance Severity")
  p_dist_freq <- create_plot(indicator_data, "DistFrequency", "Disturbance Frequency", "Disturbance Frequency")
  p_mowing_freq <- create_plot(indicator_data, "MowingFrequency", "Mowing Frequency", "Mowing Frequency")
  p_grazing_pressure <- create_plot(indicator_data, "GrazingPressure", "Grazing Pressure", "Grazing Pressure")
  p_soil_disturbance <- create_plot(indicator_data, "SoilDisturbance", "Soil Disturbance", "Soil Distrubance")
  p_competition <- create_plot(indicator_data, "Competition", "Competition", "Competition")
  p_stress <- create_plot(indicator_data, "Stress", "Stress", "Stress")
  p_ruderalness <- create_plot(indicator_data, "Ruderalness", "Ruderalness", "Ruderalness")
  p_hemeroby <- create_plot(indicator_data, "EM", "Hemeroby", "Hemeroby")
  p_seed <- create_plot(indicator_data, "log_dry_seed_mass_mg", "log10(Dry Seed Mass (mg))", "Seed Mass")
  p_leaf <- create_plot(indicator_data, "log_sla_cm2_per_mg", "log10(SLA (cm^2/mg))", "Leaf Area")
  p_height <- create_plot(indicator_data, "log_canopy_height_m", "log10(Canopy height (m))", "Canopy Height")
  
  p <- ggarrange(
    p_moisture, p_nutrients, p_reaction, 
    p_light, p_temperature, p_dist_sev, 
    p_dist_freq, p_mowing_freq, p_grazing_pressure, 
    p_soil_disturbance, p_competition, p_stress, 
    p_ruderalness, p_hemeroby, p_seed, 
    p_leaf, p_height, 
    ncol = 3,
    nrow = 6
  )
  p
  ggsave(filename, p, width = 3000, height = 4200, units = "px")
}

compute_all_p_values <- function(indicator_data, filename) {
  p_moisture <- compute_p_values(indicator_data, "EIVEresM")
  p_nutrients <- compute_p_values(indicator_data, "EIVEresN")
  p_reaction <- compute_p_values(indicator_data, "EIVEresR")
  p_light <- compute_p_values(indicator_data, "EIVEresL")
  p_temperature <- compute_p_values(indicator_data, "EIVEresT")
  p_dist_sev <- compute_p_values(indicator_data, "DistSeverity")
  p_dist_freq <- compute_p_values(indicator_data, "DistFrequency")
  p_mowing_freq <- compute_p_values(indicator_data, "MowingFrequency")
  p_grazing_pressure <- compute_p_values(indicator_data, "GrazingPressure")
  p_soil_disturbance <- compute_p_values(indicator_data, "SoilDisturbance")
  p_competition <- compute_p_values(indicator_data, "Competition")
  p_stress <- compute_p_values(indicator_data, "Stress")
  p_ruderalness <- compute_p_values(indicator_data, "Ruderalness")
  p_hemeroby <- compute_p_values(indicator_data, "EM")
  p_seed <- compute_p_values(indicator_data, "log_dry_seed_mass_mg")
  p_leaf <- compute_p_values(indicator_data, "log_sla_cm2_per_mg")
  p_height <- compute_p_values(indicator_data, "log_canopy_height_m")
  
  p_values <- p_moisture
  p_values <- full_join(p_values, p_nutrients, by = "year")
  p_values <- full_join(p_values, p_reaction, by = "year")
  p_values <- full_join(p_values, p_light, by = "year")
  p_values <- full_join(p_values, p_temperature, by = "year")
  p_values <- full_join(p_values, p_dist_sev, by = "year")
  p_values <- full_join(p_values, p_dist_freq, by = "year")
  p_values <- full_join(p_values, p_mowing_freq, by = "year")
  p_values <- full_join(p_values, p_grazing_pressure, by = "year")
  p_values <- full_join(p_values, p_soil_disturbance, by = "year")
  p_values <- full_join(p_values, p_competition, by = "year")
  p_values <- full_join(p_values, p_stress, by = "year")
  p_values <- full_join(p_values, p_ruderalness, by = "year")
  p_values <- full_join(p_values, p_hemeroby, by = "year")
  p_values <- full_join(p_values, p_seed, by = "year")
  p_values <- full_join(p_values, p_leaf, by = "year")
  p_values <- full_join(p_values, p_height, by = "year")
  
  p_values[,-1] <- round(p_values[,-1], digits = 3)
  p_values
  write_csv(p_values, filename)
}

create_full_plot(mean_iv, "../Daten/Results/Successional Dynamics/Basic Analysis/all_taxon_traits_plot.png")
compute_all_p_values(mean_iv, "../Daten/Results/Successional Dynamics/Basic Analysis/all_taxon_traits_p_values.csv")

create_full_plot(mean_iv[mean_iv$altitude_band == "low",], "../Daten/Results/Successional Dynamics/Basic Analysis/low_altitude_taxon_traits_plot.png")
compute_all_p_values(mean_iv[mean_iv$altitude_band == "low",], "../Daten/Results/Successional Dynamics/Basic Analysis/low_altitude_taxon_traits_p_values.csv")

create_full_plot(mean_iv[mean_iv$altitude_band == "mid",], "../Daten/Results/Successional Dynamics/Basic Analysis/mid_altitude_taxon_traits_plot.png")
compute_all_p_values(mean_iv[mean_iv$altitude_band == "mid",], "../Daten/Results/Successional Dynamics/Basic Analysis/mid_altitude_taxon_traits_p_values.csv")

create_full_plot(mean_iv[mean_iv$altitude_band == "high",], "../Daten/Results/Successional Dynamics/Basic Analysis/high_altitude_taxon_traits_plot.png")
compute_all_p_values(mean_iv[mean_iv$altitude_band == "high",], "../Daten/Results/Successional Dynamics/Basic Analysis/high_altitude_taxon_traits_p_values.csv")
```







